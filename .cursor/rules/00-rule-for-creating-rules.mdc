# **CRITICAL: Rule Creation Meta-Rule**

This rule instructs AI assistants on how to author, modify, and maintain Project Rules that maximize AI performance, ensure consistency, and provide comprehensive guidance. **ALWAYS follow this rule when creating or modifying any Cursor rules.**

## **INTENT**

Success means every rule created follows a consistent, comprehensive pattern that gives AI assistants all the information they need to perform tasks correctly without additional prompting. Rules should be self-contained, actionable, and eliminate ambiguity.

## **WHEN THIS APPLIES**

- Creating new Cursor rules for any project
- Modifying existing rules to improve AI performance
- Reviewing and validating rule quality
- Converting legacy documentation into Cursor rules
- Expanding rule coverage for new project areas

## **RULE CREATION FRAMEWORK**

### **1. Rule Classification & Scoping**

#### **Rule Types (Choose ONE)**
- **`alwaysApply: true`** - Universal project standards (use sparingly, only for foundational rules)
- **`globs: ["patterns"]`** - Auto-attached when matching files are in context (ideal default)
- **`description: "..."`** - Agent-requested rules (AI can pull in if relevant)
- **Manual** - Apply only when explicitly referenced with `@rule-name`

#### **Scoping Strategy**
```yaml
# Frontend rules
globs: ["src/**/*.{jsx,tsx}", "src/**/*.css", "src/**/*.scss"]

# Backend rules  
globs: ["api/**/*", "lib/**/*", "backend/**/*"]

# Database rules
globs: ["lib/**/*db*.js", "scripts/**/*.js", "api/**/*"]

# Testing rules
globs: ["tests/**/*", "**/*.test.{js,jsx}", "**/*.spec.{js,jsx}"]

# Documentation rules
globs: ["**/*.md", "**/*.mdx", "docs/**/*"]
```

### **2. File Naming Convention**

#### **Structure: `scope.topic.vN.mdc`**
- **`scope`**: Project area (frontend, backend, devxp, security, etc.)
- **`topic`**: Specific subject (react-components, express-api, testing, etc.)
- **`vN`**: Version number (v1, v2, etc.)
- **`.mdc`**: Required extension for Cursor recognition

#### **Examples**
```
frontend.react-components.v1.mdc
backend.express-api.v2.mdc
devxp.pull-requests.v1.mdc
security.authentication.v1.mdc
database.mongodb.v1.mdc
testing.vitest.v1.mdc
deployment.vercel.v1.mdc
```

### **3. Rule Content Structure (MANDATORY)**

#### **YAML Frontmatter**
```yaml
---
description: "Clear, specific description of what this rule accomplishes"
globs: ["file patterns for auto-attachment"]
alwaysApply: false  # Only true for foundational rules
---
```

#### **Content Sections (In Order)**
1. **Title & Critical Warnings** - Most important information first
2. **Overview & Purpose** - What this rule accomplishes
3. **Implementation Details** - Step-by-step guidance
4. **Code Examples** - Real, working examples
5. **Common Mistakes** - What NOT to do
6. **Validation Checklists** - How to verify compliance
7. **Related Files** - References to existing code
8. **When in Doubt** - Fallback guidance

### **4. Content Quality Requirements**

#### **Critical Information Weighting**
- **BEGINNING**: CRITICAL warnings, core requirements, must-follow patterns
- **MIDDLE**: Implementation details, examples, best practices
- **END**: Validation checklists, common mistakes, related files

#### **Example Quality Standards**
```markdown
## **CRITICAL: Never Violate This Pattern**

## **1. Core Requirements**
### **Mandatory Implementation**
- **ALWAYS** use this exact pattern
- **NEVER** create alternative approaches
- **MUST** follow established conventions

### **Code Examples**
```javascript
// CORRECT: Follow this exact pattern
export default function Component() {
  // Implementation details
}
```

## **Common Mistakes**
### **❌ DON'T Do This**
```javascript
// WRONG: This will cause problems
function Component() {
  // Incorrect implementation
}
```

## **Validation Checklist**
- [ ] Does this follow the established pattern?
- [ ] Are all requirements met?
- [ ] Does this pass validation?

## **Related Files**
- **`file.js`**: Description of relevance

## **When in Doubt**
1. **Check existing code** for examples
2. **Follow established patterns** exactly
3. **Ask for clarification** if unsure
```

### **5. AI Performance Optimization**

#### **Information Density**
- **Eliminate ambiguity** - Use precise, specific language
- **Provide context** - Explain WHY patterns exist
- **Include examples** - Code examples are more valuable than descriptions
- **Reference files** - Point to specific implementations in the codebase

#### **Pattern Recognition**
- **Use consistent formatting** - Same structure across all rules
- **Standardize terminology** - Use the same words for the same concepts
- **Provide checklists** - Make verification systematic and easy
- **Include edge cases** - Cover common variations and exceptions

#### **Memory Optimization**
- **Group related information** - Logical sections that build on each other
- **Use visual hierarchy** - Clear headings, bullet points, and formatting
- **Include cross-references** - Link related rules and concepts
- **Provide fallbacks** - What to do when primary guidance doesn't apply

### **6. Rule Maintenance & Validation**

#### **Quality Assurance Checklist**
- [ ] **Clear purpose** - Rule accomplishes one specific goal
- [ ] **Complete coverage** - All aspects of the topic are addressed
- [ ] **Actionable guidance** - AI can implement without additional questions
- [ ] **Real examples** - Code examples compile and work
- [ ] **Validation steps** - Clear way to verify compliance
- [ ] **Related references** - Points to existing implementations
- [ ] **Error prevention** - Covers common mistakes and pitfalls

#### **Regular Review Schedule**
- **Monthly**: Check for outdated information
- **Quarterly**: Validate examples against current codebase
- **Semi-annually**: Review rule coverage and identify gaps
- **Annually**: Major review and restructuring if needed

## **RULE CREATION WORKFLOW**

### **Step 1: Identify Need**
- Is this guidance repeated across multiple chats?
- Is this a project decision or architectural pattern?
- Is this domain knowledge the AI should always have?
- Is this a workflow or template that should be standardized?

### **Step 2: Determine Scope**
- **What files** should trigger this rule?
- **What context** makes this rule relevant?
- **How often** should this rule be applied?
- **What priority** does this rule have?

### **Step 3: Research Existing Patterns**
- **Study the codebase** for established patterns
- **Review existing rules** for consistency
- **Identify related files** and implementations
- **Understand the reasoning** behind current approaches

### **Step 4: Create Rule Content**
- **Follow the mandatory structure** exactly
- **Use real examples** from the codebase
- **Include validation steps** for verification
- **Reference specific files** and implementations
- **Explain the reasoning** behind requirements

### **Step 5: Validate Rule Quality**
- **Test with AI** - Does it understand and follow the rule?
- **Verify examples** - Do they compile and work?
- **Check references** - Do the files still exist?
- **Review completeness** - Are all aspects covered?

### **Step 6: Deploy and Monitor**
- **Commit to version control** with descriptive message
- **Test in practice** - Does AI performance improve?
- **Gather feedback** - Are there gaps or confusion?
- **Iterate and improve** - Update based on usage

## **COMMON RULE CREATION MISTAKES**

### **❌ DON'T Create Vague Rules**
```markdown
# WRONG: Too vague and unactionable
## **Use good practices**
- Write clean code
- Follow standards
- Be consistent

# CORRECT: Specific and actionable
## **Code Style Requirements**
- Use 2-space indentation
- Follow PascalCase for components
- Use camelCase for functions
- Include JSDoc comments for all exports
```

### **❌ DON'T Skip Examples**
```markdown
# WRONG: No examples provided
## **Component Structure**
- Use functional components
- Include proper error handling

# CORRECT: With concrete examples
## **Component Structure**
```javascript
// CORRECT: Functional component with error handling
export default function Component({ prop1, prop2 }) {
  const [error, setError] = useState(null)
  
  if (error) {
    return <div className="error">Error: {error}</div>
  }
  
  return <div>{/* Component content */}</div>
}
```
```

### **❌ DON'T Ignore Validation**
```markdown
# WRONG: No way to verify compliance
## **API Standards**
- Use proper error handling
- Return consistent responses

# CORRECT: With validation checklist
## **API Standards**
- Use proper error handling
- Return consistent responses

## **Validation Checklist**
- [ ] Does this handle all error cases?
- [ ] Are response formats consistent?
- [ ] Does this follow established patterns?
- [ ] Are error messages user-friendly?
```

### **❌ DON'T Create Monolithic Rules**
```markdown
# WRONG: One giant rule covering everything
## **Frontend Development**
- React components, styling, testing, performance, accessibility...

# CORRECT: Focused, composable rules
## **React Components** (frontend.react-components.v1.mdc)
- Component structure and patterns

## **Styling Standards** (frontend.styling.v1.mdc)  
- CSS organization and Tailwind usage

## **Testing Requirements** (frontend.testing.v1.mdc)
- Component testing patterns
```

## **RULE TEMPLATE (COPY THIS)**

```markdown
---
description: "Brief description of what this rule accomplishes"
globs: ["file patterns for auto-attachment"]
alwaysApply: false
---

# Rule Title

## **CRITICAL: Key Requirements**

## **1. Main Section**
### **Subsection**
- **Key points**
- **Requirements**

### **Code Examples**
```javascript
// CORRECT: Proper implementation
```

## **Common Mistakes**
### **❌ DON'T Do This**
```javascript
// WRONG: What not to do
```

## **Validation Checklist**
- [ ] Check item 1
- [ ] Check item 2

## **Related Files**
- **`file.js`**: Description

## **When in Doubt**
1. **Action 1**
2. **Action 2**
```

## **RULE QUALITY METRICS**

### **Completeness Score**
- **100%**: Covers all aspects, includes examples, validation, and references
- **80%**: Covers main aspects, includes examples and validation
- **60%**: Covers main aspects, includes examples
- **40%**: Covers main aspects only
- **<40%**: Incomplete, needs significant work

### **AI Performance Impact**
- **High**: AI can implement without additional questions
- **Medium**: AI can implement with minimal clarification
- **Low**: AI needs significant guidance to implement
- **Poor**: AI is confused or makes mistakes

### **Maintenance Effort**
- **Low**: Rule is self-contained and rarely needs updates
- **Medium**: Rule needs occasional updates for accuracy
- **High**: Rule needs frequent updates and maintenance
- **Excessive**: Rule is constantly outdated and confusing

## **BEST PRACTICES SUMMARY**

1. **Be specific** - Avoid vague language and generalizations
2. **Provide examples** - Code examples are more valuable than descriptions
3. **Use consistent formatting** - Maintain uniform structure across all rules
4. **Include validation** - Make verification easy and systematic
5. **Reference files** - Point to specific implementations in the codebase
6. **Explain reasoning** - Help AI understand why patterns exist
7. **Cover edge cases** - Address common variations and exceptions
8. **Maintain quality** - Regular review and updates for accuracy
9. **Test with AI** - Verify rules improve AI performance
10. **Iterate quickly** - Improve rules based on usage and feedback

## **WHEN IN DOUBT**

1. **Follow the template** exactly - Don't deviate from the established structure
2. **Study existing rules** - Use successful rules as examples
3. **Test with AI** - Create a rule and see if AI follows it correctly
4. **Ask for feedback** - Get input from team members using the rules
5. **Keep iterating** - Rules improve with usage and refinement

## **CONCLUSION**

Creating high-quality Cursor rules is both an art and a science. By following this meta-rule consistently, you'll create rules that maximize AI performance, ensure code quality, and provide comprehensive guidance for your project. Remember: **quality rules lead to quality code, and quality code leads to successful projects.**

**Remember**: This meta-rule applies to ALL rule creation. Follow it religiously to ensure consistency and maximize AI performance across your entire rules system.
description:
globs:
alwaysApply: true
---
