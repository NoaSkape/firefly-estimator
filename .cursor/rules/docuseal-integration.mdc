---
alwaysApply: false
---

# DocuSeal Template Creation & Integration Rules

## Overview
This rule documents the complete process for creating and integrating DocuSeal templates in the Firefly Estimator project, based on successful implementation and debugging. **CRITICAL**: This rule contains the FINAL WORKING SOLUTION that resolves the persistent "Template does not contain fields" error.

## Environment Setup

### Required Environment Variables (.env)
```env
# DocuSeal Configuration
DOCUSEAL_API_KEY=your_full_43_character_api_key_here
DOCUSEAL_BASE_URL=https://api.docuseal.co
DOCUSEAL_FIREFLY_EMAIL=office@fireflytinyhomes.com

# Template IDs (generated after template creation)
# ‚úÖ WORKING TEMPLATES (as of 2025-09-08):
DOCUSEAL_TEMPLATE_ID_AGREEMENT=1710241
DOCUSEAL_TEMPLATE_ID_DELIVERY=1710288
DOCUSEAL_TEMPLATE_ID_FINAL=template_id_here
```

### Critical Environment Loading Rules
1. **Dev Server**: Must load .env from project root using `dotenv.config({ path: path.join(__dirname, '..', '.env') })`
2. **API Routes**: Environment variables must be available before importing DocuSeal modules
3. **Variable Consistency**: Use `BASE` internally, load from `DOCUSEAL_BASE_URL`

## DocuSeal API Integration Architecture

### 1. Client Configuration (lib/docuseal/client.js)
```javascript
// ‚úÖ CORRECT: Load environment variables at module level
const BASE = process.env.DOCUSEAL_BASE_URL || "https://api.docuseal.co"
const API_KEY = process.env.DOCUSEAL_API_KEY

// ‚úÖ CORRECT: Headers function
function hdr(json = true) {
  return {
    "X-Auth-Token": API_KEY,  // Use X-Auth-Token, NOT Bearer
    ...(json ? { "Content-Type": "application/json", "Accept": "application/json" } : {}),
  }
}

// ‚úÖ CORRECT: HTML Template Creation (NOT DOCX for HTML content)
export async function dsCreateTemplateFromHtml(body) {
  const res = await fetch(`${BASE}/templates/html`, {  // Use /templates/html for HTML
    method: "POST",
    headers: hdr(true),
    body: JSON.stringify(body),
  })
  // ... error handling and response parsing
}
```

### 2. HTML Template Structure (lib/contracts/html/*.js)

#### üö® CRITICAL: Field Tag Syntax Rules
**ROOT CAUSE IDENTIFIED**: DocuSeal's HTML API (`/templates/html`) requires **HTML element syntax**, not curly brace syntax!

```html
<!-- ‚úÖ CORRECT: HTML element syntax for /templates/html endpoint -->
<text-field name="buyer_full_name" role="buyer" required="true" style="display: inline-block; border: 1px solid #ccc; padding: 4px; width: 200px; height: 20px;"></text-field>
<signature-field name="buyer_signature" role="buyer" required="true" style="display: inline-block; border: 1px solid #ccc; padding: 4px; width: 200px; height: 50px;"></signature-field>
<initials-field name="buyer_initials_1" role="buyer" required="true" style="display: inline-block; border: 1px solid #ccc; padding: 4px; width: 60px; height: 30px;"></initials-field>

<!-- ‚ùå WRONG: Curly brace syntax (only works for PDF templates) -->
{{field_name;type=text;role=buyer;required=true}}
{{buyer_signature;type=signature;role=buyer;required=true}}

<!-- ‚ùå WRONG: Simple placeholder syntax -->
{{field_name}}
[[FIELD_NAME]]
```

#### Field Conversion Process
Use `lib/contracts/html/field-converter.js` to convert curly brace syntax to HTML elements:

```javascript
// 1. Generate HTML with curly brace field tags
const htmlWithFieldTags = `<!doctype html>
<html>
<body>
  <p>Buyer Name: {{buyer_full_name;type=text;role=buyer;required=true}}</p>
  <p>Signature: {{buyer_signature;type=signature;role=buyer;required=true}}</p>
</body>
</html>`

// 2. Convert to HTML elements for DocuSeal HTML API
import { convertFieldTagsToHtmlElements } from './field-converter.js'
const finalHtml = convertFieldTagsToHtmlElements(htmlWithFieldTags)
```

#### Field Converter Implementation
The `field-converter.js` utility is the **CRITICAL BREAKTHROUGH** that resolves the "Template does not contain fields" error:

```javascript
// lib/contracts/html/field-converter.js
export function convertFieldTagsToHtmlElements(htmlContent) {
  return htmlContent.replace(/\{\{([^;]+);type=([^;]+);role=([^;]+);required=(true|false)([^}]+)?\}\}/g, 
    (match, name, type, role, required, rest) => {
      const style = "display: inline-block; border: 1px solid #ccc; padding: 4px;"
      let width = "200px";
      let height = "20px";
      
      // Adjust size based on type
      if (type === 'signature') {
        height = "50px";
      } else if (type === 'initials') {
        width = "60px";
        height = "30px";
      }

      const attributes = [
        `name="${name}"`,
        `role="${role}"`,
        `required="${required}"`,
        `style="${style}width: ${width}; height: ${height};"`
      ].join(' ');

      switch (type) {
        case 'text':
          return `<text-field ${attributes}></text-field>`;
        case 'signature':
          return `<signature-field ${attributes}></signature-field>`;
        case 'initials':
          return `<initials-field ${attributes}></initials-field>`;
        case 'date':
          return `<date-field ${attributes}></date-field>`;
        default:
          return `<text-field ${attributes}></text-field>`;
      }
    });
}
```

**This converter transforms:**
- `{{buyer_full_name;type=text;role=buyer;required=true}}` 
- **‚Üí** `<text-field name="buyer_full_name" role="buyer" required="true" style="..."></text-field>`

#### Role Naming Convention
- **buyer**: Primary buyer/customer
- **cobuyer**: Secondary buyer (optional)
- **firefly_signer**: Firefly Tiny Homes representative

#### Field Type Mapping
- `type=text`: Text input fields (names, addresses, prices)
- `type=signature`: Signature fields
- `type=initials`: Initial fields (use multiple with different names: buyer_initials_1, buyer_initials_2)
- `type=date`: Date fields

### 3. Template Builder Pattern (lib/docuseal/builders/*.js)
```javascript
export async function buildAgreementTemplate() {
  // 1. Generate HTML with curly brace field tags
  const html = buildAgreementHtmlForDocuSeal()

  // 2. Create template body for HTML endpoint
  const templateBody = {
    name: "Firefly ‚Äì Master Retail Purchase Agreement (Cash Sale) v4 FIXED",
    html: html,                    // HTML content with field elements
    size: "Letter",               // Page size
    external_id: "firefly_agreement_v4_fixed",     // Unique identifier
    folder_name: "Firefly Templates",   // Organization
    shared_link: true,            // Allow sharing
    // üö® CRITICAL: Explicitly define roles for multi-party signing
    roles: ['buyer', 'cobuyer', 'firefly_signer']
  }

  // 3. Call HTML endpoint (NOT DOCX)
  const templateId = await dsCreateTemplateFromHtml(templateBody)
  return templateId
}
```

## Development Server Integration

### Dev Server Endpoint Pattern (backend/dev-server.js)
```javascript
// Template creation endpoint for development
app.post('/api/admin/docuseal/init-templates/agreement', async (req, res) => {
  try {
    const { buildAgreementTemplate } = await import('../lib/docuseal/builders/agreement.js')
    const templateId = await buildAgreementTemplate()
    
    res.json({
      success: true,
      templateId,
      message: 'Template created successfully',
      envVariable: 'DOCUSEAL_TEMPLATE_ID_AGREEMENT',
      instructions: `Add this to your .env file: DOCUSEAL_TEMPLATE_ID_AGREEMENT=${templateId}`
    })
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to create template',
      details: error.message
    })
  }
})
```

## Data Mapping Rules

### Order-to-Template Field Mapping
```javascript
// ‚úÖ CORRECT: Field names must match template exactly
function buildPackFields(pack, order) {
  return {
    // Buyer information - match template field names exactly
    buyer_full_name: order.buyer.firstName + ' ' + order.buyer.lastName,
    buyer_email: order.buyer.email,
    buyer_phone: order.buyer.phone,
    buyer_address: formatAddress(order.deliveryAddress),
    
    // Model information - match template field names exactly  
    model_brand: order.model.brand,
    model_code: order.model.model,
    model_year: order.model.year,
    dimensions: order.model.dimensions,
    
    // Pricing - match template field names exactly
    price_base: formatCurrency(order.pricing.base),
    price_options: formatCurrency(order.pricing.options),
    price_freight_est: formatCurrency(order.pricing.delivery || 0),
    price_setup: formatCurrency(order.pricing.setup || 0),
    price_other: formatCurrency(order.pricing.titleFee || 0),
    price_total: formatCurrency(order.pricing.total),
    
    // Co-buyer fields (optional)
    cobuyer_full_name: order.buyer.coFirstName ? order.buyer.coFirstName + ' ' + order.buyer.coLastName : '',
    cobuyer_email: order.buyer.coEmail || ''
  }
}
```

### Session Creation Rules
```javascript
// ‚úÖ CORRECT: Role names must match template submitters + proper order
const submitters = [
  {
    name: order.buyer.firstName + ' ' + order.buyer.lastName,
    email: order.buyer.email,
    role: 'buyer',  // Must match template role exactly
    order: 0        // üö® CRITICAL: Parallel signing (buyer + co-buyer)
  },
  // Co-buyer (optional)
  ...(order.coBuyer.firstName ? [{
    name: order.coBuyer.firstName + ' ' + order.coBuyer.lastName,
    email: order.coBuyer.email || order.buyer.email,
    role: 'cobuyer',  // Must match template role exactly
    order: 0          // üö® CRITICAL: Parallel signing (buyer + co-buyer)
  }] : []),
  {
    name: 'Firefly Tiny Homes',
    email: 'office@fireflytinyhomes.com',
    role: 'firefly_signer',  // Must match template role exactly
    order: 1                 // üö® CRITICAL: Sequential signing (after buyer/co-buyer)
  }
]
```

## Common Pitfalls & Solutions

### ‚ùå WRONG Approaches
1. **Using /templates/docx for HTML content**: This endpoint expects base64-encoded DOCX files
2. **Curly brace syntax for HTML API**: `{{field_name;type=text}}` only works for PDF templates
3. **Missing field conversion**: Not converting curly braces to HTML elements
4. **Missing roles in template**: Not defining `roles: ['buyer', 'cobuyer', 'firefly_signer']`
5. **Missing order in submitters**: Not setting `order: 0` for parallel, `order: 1` for sequential
6. **Mismatched field names**: Template expects `buyer_full_name`, session sends `buyer_name`
7. **Wrong role names**: Template has `buyer`, session sends `Buyer`
8. **Bearer authentication**: Use `X-Auth-Token` header instead
9. **Environment loading**: Loading .env from wrong directory in dev server

### ‚úÖ CORRECT Solutions
1. **Use /templates/html**: For HTML content with field elements
2. **HTML element syntax**: `<text-field name="buyer_full_name" role="buyer">`
3. **Field conversion**: Use `convertFieldTagsToHtmlElements()` to convert curly braces
4. **Explicit roles**: Always include `roles: ['buyer', 'cobuyer', 'firefly_signer']` in template
5. **Proper order**: Set `order: 0` for parallel signing, `order: 1` for sequential
6. **Exact field mapping**: Template and session field names must match perfectly
7. **Consistent roles**: Use lowercase role names consistently
8. **X-Auth-Token**: Proper DocuSeal authentication header
9. **Proper .env loading**: Use full path in dev server

## Testing & Debugging Process

### 1. Template Creation Test
```bash
# PowerShell command to test template creation
Invoke-RestMethod -Uri "http://localhost:3001/api/admin/docuseal/init-templates/agreement" -Method POST
```

### 2. Environment Variable Debug
```javascript
// Add to dev server for debugging
console.log('üîë DOCUSEAL_API_KEY loaded:', process.env.DOCUSEAL_API_KEY ? 'YES (length: ' + process.env.DOCUSEAL_API_KEY.length + ')' : 'NO')
console.log('üìÅ .env path:', path.join(__dirname, '..', '.env'))
```

### 3. Session Creation Test
```javascript
// Test session creation with real order data
const session = await createPackEnvelope(orderId, 'agreement', order)
console.log('Signing URL:', session.signingUrl)
```

## File Structure Requirements

```
lib/
‚îú‚îÄ‚îÄ docuseal/
‚îÇ   ‚îú‚îÄ‚îÄ client.js                 # Unified API client with HTML endpoint
‚îÇ   ‚îî‚îÄ‚îÄ builders/
‚îÇ       ‚îú‚îÄ‚îÄ agreement.js          # Agreement template builder
‚îÇ       ‚îú‚îÄ‚îÄ delivery.js           # Delivery template builder  
‚îÇ       ‚îî‚îÄ‚îÄ final.js              # Final acknowledgment builder
‚îú‚îÄ‚îÄ contracts/
‚îÇ   ‚îî‚îÄ‚îÄ html/
‚îÇ       ‚îú‚îÄ‚îÄ agreement.js          # HTML with DocuSeal field tags
‚îÇ       ‚îú‚îÄ‚îÄ delivery.js           # Delivery agreement HTML
‚îÇ       ‚îú‚îÄ‚îÄ final.js              # Final acknowledgment HTML
‚îÇ       ‚îî‚îÄ‚îÄ field-converter.js    # üö® CRITICAL: Converts {{}} to HTML elements
backend/
‚îî‚îÄ‚îÄ dev-server.js                 # Dev server with template endpoints
```

## Success Criteria

### Template Creation Success
- ‚úÖ Template ID returned (e.g., 1710241, 1710288)
- ‚úÖ Template visible in DocuSeal dashboard
- ‚úÖ Template shows formatted document (not raw HTML)
- ‚úÖ Fields are properly mapped and interactive
- ‚úÖ **CRITICAL**: Template has `fields` array with parsed field elements
- ‚úÖ **CRITICAL**: Template has `submitters` array with correct roles

### Signing Experience Success  
- ‚úÖ "Open Full View" shows formatted PDF
- ‚úÖ "Start Signing" shows identical formatted document
- ‚úÖ All buyer/model/pricing data auto-populated
- ‚úÖ Signature and initial fields are interactive
- ‚úÖ Co-buyer fields work when present

## Emergency Troubleshooting

### Common Errors & Solutions
1. **"DOCUSEAL_API_KEY environment variable is required"**
   - Check .env file exists and has correct API key
   - Verify dev server loads .env from project root
   - Restart dev server after .env changes

2. **"DOCUSEAL_BASE is not defined"**
   - Check variable naming consistency in client.js
   - Use `BASE` internally, load from `DOCUSEAL_BASE_URL`

3. **"Failed to execute 'json' on 'Response'"**
   - API server not running or wrong port
   - Check Vite proxy configuration
   - Verify API endpoint exists in dev server

4. **Raw HTML shown in DocuSeal instead of formatted document**
   - Using wrong endpoint (/templates/docx instead of /templates/html)
   - Incorrect field tag syntax
   - Need to recreate template with HTML endpoint

5. **"422 Template does not contain fields" error**
   - **ROOT CAUSE**: Using curly brace syntax `{{field}}` with HTML API
   - **SOLUTION**: Use HTML element syntax `<text-field name="field">`
   - **FIX**: Implement `convertFieldTagsToHtmlElements()` function
   - **VERIFY**: Check template has populated `fields` array

6. **"500 Internal Server Error" during session creation**
   - Missing `roles` array in template creation
   - Missing `order` field in submitters array
   - Incorrect signing URL extraction logic
   - **FIX**: Add `roles: ['buyer', 'cobuyer', 'firefly_signer']` to template
   - **FIX**: Add `order: 0` for parallel, `order: 1` for sequential signing

## üö® FINAL WORKING SOLUTION SUMMARY

**The complete solution that resolves all DocuSeal integration issues:**

1. **Field Conversion**: Use `lib/contracts/html/field-converter.js` to convert `{{field}}` ‚Üí `<text-field>`
2. **HTML API**: Use `/templates/html` endpoint with HTML element syntax
3. **Template Roles**: Always include `roles: ['buyer', 'cobuyer', 'firefly_signer']`
4. **Submitter Order**: Use `order: 0` for parallel, `order: 1` for sequential signing
5. **Exact Field Names**: Match template field names exactly in session data
6. **Working Templates**: Use IDs `1710241` (agreement) and `1710288` (delivery)

This rule captures the complete DocuSeal integration process that took hours to debug and perfect. Follow these patterns exactly for consistent success.# DocuSeal Template Creation & Integration Rules

## Overview
This rule documents the complete process for creating and integrating DocuSeal templates in the Firefly Estimator project, based on successful implementation and debugging. **CRITICAL**: This rule contains the FINAL WORKING SOLUTION that resolves the persistent "Template does not contain fields" error.

## Environment Setup

### Required Environment Variables (.env)
```env
# DocuSeal Configuration
DOCUSEAL_API_KEY=your_full_43_character_api_key_here
DOCUSEAL_BASE_URL=https://api.docuseal.co
DOCUSEAL_FIREFLY_EMAIL=office@fireflytinyhomes.com

# Template IDs (generated after template creation)
# ‚úÖ WORKING TEMPLATES (as of 2025-09-08):
DOCUSEAL_TEMPLATE_ID_AGREEMENT=1710241
DOCUSEAL_TEMPLATE_ID_DELIVERY=1710288
DOCUSEAL_TEMPLATE_ID_FINAL=template_id_here
```

### Critical Environment Loading Rules
1. **Dev Server**: Must load .env from project root using `dotenv.config({ path: path.join(__dirname, '..', '.env') })`
2. **API Routes**: Environment variables must be available before importing DocuSeal modules
3. **Variable Consistency**: Use `BASE` internally, load from `DOCUSEAL_BASE_URL`

## DocuSeal API Integration Architecture

### 1. Client Configuration (lib/docuseal/client.js)
```javascript
// ‚úÖ CORRECT: Load environment variables at module level
const BASE = process.env.DOCUSEAL_BASE_URL || "https://api.docuseal.co"
const API_KEY = process.env.DOCUSEAL_API_KEY

// ‚úÖ CORRECT: Headers function
function hdr(json = true) {
  return {
    "X-Auth-Token": API_KEY,  // Use X-Auth-Token, NOT Bearer
    ...(json ? { "Content-Type": "application/json", "Accept": "application/json" } : {}),
  }
}

// ‚úÖ CORRECT: HTML Template Creation (NOT DOCX for HTML content)
export async function dsCreateTemplateFromHtml(body) {
  const res = await fetch(`${BASE}/templates/html`, {  // Use /templates/html for HTML
    method: "POST",
    headers: hdr(true),
    body: JSON.stringify(body),
  })
  // ... error handling and response parsing
}
```

### 2. HTML Template Structure (lib/contracts/html/*.js)

#### üö® CRITICAL: Field Tag Syntax Rules
**ROOT CAUSE IDENTIFIED**: DocuSeal's HTML API (`/templates/html`) requires **HTML element syntax**, not curly brace syntax!

```html
<!-- ‚úÖ CORRECT: HTML element syntax for /templates/html endpoint -->
<text-field name="buyer_full_name" role="buyer" required="true" style="display: inline-block; border: 1px solid #ccc; padding: 4px; width: 200px; height: 20px;"></text-field>
<signature-field name="buyer_signature" role="buyer" required="true" style="display: inline-block; border: 1px solid #ccc; padding: 4px; width: 200px; height: 50px;"></signature-field>
<initials-field name="buyer_initials_1" role="buyer" required="true" style="display: inline-block; border: 1px solid #ccc; padding: 4px; width: 60px; height: 30px;"></initials-field>

<!-- ‚ùå WRONG: Curly brace syntax (only works for PDF templates) -->
{{field_name;type=text;role=buyer;required=true}}
{{buyer_signature;type=signature;role=buyer;required=true}}

<!-- ‚ùå WRONG: Simple placeholder syntax -->
{{field_name}}
[[FIELD_NAME]]
```

#### Field Conversion Process
Use `lib/contracts/html/field-converter.js` to convert curly brace syntax to HTML elements:

```javascript
// 1. Generate HTML with curly brace field tags
const htmlWithFieldTags = `<!doctype html>
<html>
<body>
  <p>Buyer Name: {{buyer_full_name;type=text;role=buyer;required=true}}</p>
  <p>Signature: {{buyer_signature;type=signature;role=buyer;required=true}}</p>
</body>
</html>`

// 2. Convert to HTML elements for DocuSeal HTML API
import { convertFieldTagsToHtmlElements } from './field-converter.js'
const finalHtml = convertFieldTagsToHtmlElements(htmlWithFieldTags)
```

#### Field Converter Implementation
The `field-converter.js` utility is the **CRITICAL BREAKTHROUGH** that resolves the "Template does not contain fields" error:

```javascript
// lib/contracts/html/field-converter.js
export function convertFieldTagsToHtmlElements(htmlContent) {
  return htmlContent.replace(/\{\{([^;]+);type=([^;]+);role=([^;]+);required=(true|false)([^}]+)?\}\}/g, 
    (match, name, type, role, required, rest) => {
      const style = "display: inline-block; border: 1px solid #ccc; padding: 4px;"
      let width = "200px";
      let height = "20px";
      
      // Adjust size based on type
      if (type === 'signature') {
        height = "50px";
      } else if (type === 'initials') {
        width = "60px";
        height = "30px";
      }

      const attributes = [
        `name="${name}"`,
        `role="${role}"`,
        `required="${required}"`,
        `style="${style}width: ${width}; height: ${height};"`
      ].join(' ');

      switch (type) {
        case 'text':
          return `<text-field ${attributes}></text-field>`;
        case 'signature':
          return `<signature-field ${attributes}></signature-field>`;
        case 'initials':
          return `<initials-field ${attributes}></initials-field>`;
        case 'date':
          return `<date-field ${attributes}></date-field>`;
        default:
          return `<text-field ${attributes}></text-field>`;
      }
    });
}
```

**This converter transforms:**
- `{{buyer_full_name;type=text;role=buyer;required=true}}` 
- **‚Üí** `<text-field name="buyer_full_name" role="buyer" required="true" style="..."></text-field>`

#### Role Naming Convention
- **buyer**: Primary buyer/customer
- **cobuyer**: Secondary buyer (optional)
- **firefly_signer**: Firefly Tiny Homes representative

#### Field Type Mapping
- `type=text`: Text input fields (names, addresses, prices)
- `type=signature`: Signature fields
- `type=initials`: Initial fields (use multiple with different names: buyer_initials_1, buyer_initials_2)
- `type=date`: Date fields

### 3. Template Builder Pattern (lib/docuseal/builders/*.js)
```javascript
export async function buildAgreementTemplate() {
  // 1. Generate HTML with curly brace field tags
  const html = buildAgreementHtmlForDocuSeal()

  // 2. Create template body for HTML endpoint
  const templateBody = {
    name: "Firefly ‚Äì Master Retail Purchase Agreement (Cash Sale) v4 FIXED",
    html: html,                    // HTML content with field elements
    size: "Letter",               // Page size
    external_id: "firefly_agreement_v4_fixed",     // Unique identifier
    folder_name: "Firefly Templates",   // Organization
    shared_link: true,            // Allow sharing
    // üö® CRITICAL: Explicitly define roles for multi-party signing
    roles: ['buyer', 'cobuyer', 'firefly_signer']
  }

  // 3. Call HTML endpoint (NOT DOCX)
  const templateId = await dsCreateTemplateFromHtml(templateBody)
  return templateId
}
```

## Development Server Integration

### Dev Server Endpoint Pattern (backend/dev-server.js)
```javascript
// Template creation endpoint for development
app.post('/api/admin/docuseal/init-templates/agreement', async (req, res) => {
  try {
    const { buildAgreementTemplate } = await import('../lib/docuseal/builders/agreement.js')
    const templateId = await buildAgreementTemplate()
    
    res.json({
      success: true,
      templateId,
      message: 'Template created successfully',
      envVariable: 'DOCUSEAL_TEMPLATE_ID_AGREEMENT',
      instructions: `Add this to your .env file: DOCUSEAL_TEMPLATE_ID_AGREEMENT=${templateId}`
    })
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to create template',
      details: error.message
    })
  }
})
```

## Data Mapping Rules

### Order-to-Template Field Mapping
```javascript
// ‚úÖ CORRECT: Field names must match template exactly
function buildPackFields(pack, order) {
  return {
    // Buyer information - match template field names exactly
    buyer_full_name: order.buyer.firstName + ' ' + order.buyer.lastName,
    buyer_email: order.buyer.email,
    buyer_phone: order.buyer.phone,
    buyer_address: formatAddress(order.deliveryAddress),
    
    // Model information - match template field names exactly  
    model_brand: order.model.brand,
    model_code: order.model.model,
    model_year: order.model.year,
    dimensions: order.model.dimensions,
    
    // Pricing - match template field names exactly
    price_base: formatCurrency(order.pricing.base),
    price_options: formatCurrency(order.pricing.options),
    price_freight_est: formatCurrency(order.pricing.delivery || 0),
    price_setup: formatCurrency(order.pricing.setup || 0),
    price_other: formatCurrency(order.pricing.titleFee || 0),
    price_total: formatCurrency(order.pricing.total),
    
    // Co-buyer fields (optional)
    cobuyer_full_name: order.buyer.coFirstName ? order.buyer.coFirstName + ' ' + order.buyer.coLastName : '',
    cobuyer_email: order.buyer.coEmail || ''
  }
}
```

### Session Creation Rules
```javascript
// ‚úÖ CORRECT: Role names must match template submitters + proper order
const submitters = [
  {
    name: order.buyer.firstName + ' ' + order.buyer.lastName,
    email: order.buyer.email,
    role: 'buyer',  // Must match template role exactly
    order: 0        // üö® CRITICAL: Parallel signing (buyer + co-buyer)
  },
  // Co-buyer (optional)
  ...(order.coBuyer.firstName ? [{
    name: order.coBuyer.firstName + ' ' + order.coBuyer.lastName,
    email: order.coBuyer.email || order.buyer.email,
    role: 'cobuyer',  // Must match template role exactly
    order: 0          // üö® CRITICAL: Parallel signing (buyer + co-buyer)
  }] : []),
  {
    name: 'Firefly Tiny Homes',
    email: 'office@fireflytinyhomes.com',
    role: 'firefly_signer',  // Must match template role exactly
    order: 1                 // üö® CRITICAL: Sequential signing (after buyer/co-buyer)
  }
]
```

## Common Pitfalls & Solutions

### ‚ùå WRONG Approaches
1. **Using /templates/docx for HTML content**: This endpoint expects base64-encoded DOCX files
2. **Curly brace syntax for HTML API**: `{{field_name;type=text}}` only works for PDF templates
3. **Missing field conversion**: Not converting curly braces to HTML elements
4. **Missing roles in template**: Not defining `roles: ['buyer', 'cobuyer', 'firefly_signer']`
5. **Missing order in submitters**: Not setting `order: 0` for parallel, `order: 1` for sequential
6. **Mismatched field names**: Template expects `buyer_full_name`, session sends `buyer_name`
7. **Wrong role names**: Template has `buyer`, session sends `Buyer`
8. **Bearer authentication**: Use `X-Auth-Token` header instead
9. **Environment loading**: Loading .env from wrong directory in dev server

### ‚úÖ CORRECT Solutions
1. **Use /templates/html**: For HTML content with field elements
2. **HTML element syntax**: `<text-field name="buyer_full_name" role="buyer">`
3. **Field conversion**: Use `convertFieldTagsToHtmlElements()` to convert curly braces
4. **Explicit roles**: Always include `roles: ['buyer', 'cobuyer', 'firefly_signer']` in template
5. **Proper order**: Set `order: 0` for parallel signing, `order: 1` for sequential
6. **Exact field mapping**: Template and session field names must match perfectly
7. **Consistent roles**: Use lowercase role names consistently
8. **X-Auth-Token**: Proper DocuSeal authentication header
9. **Proper .env loading**: Use full path in dev server

## Testing & Debugging Process

### 1. Template Creation Test
```bash
# PowerShell command to test template creation
Invoke-RestMethod -Uri "http://localhost:3001/api/admin/docuseal/init-templates/agreement" -Method POST
```

### 2. Environment Variable Debug
```javascript
// Add to dev server for debugging
console.log('üîë DOCUSEAL_API_KEY loaded:', process.env.DOCUSEAL_API_KEY ? 'YES (length: ' + process.env.DOCUSEAL_API_KEY.length + ')' : 'NO')
console.log('üìÅ .env path:', path.join(__dirname, '..', '.env'))
```

### 3. Session Creation Test
```javascript
// Test session creation with real order data
const session = await createPackEnvelope(orderId, 'agreement', order)
console.log('Signing URL:', session.signingUrl)
```

## File Structure Requirements

```
lib/
‚îú‚îÄ‚îÄ docuseal/
‚îÇ   ‚îú‚îÄ‚îÄ client.js                 # Unified API client with HTML endpoint
‚îÇ   ‚îî‚îÄ‚îÄ builders/
‚îÇ       ‚îú‚îÄ‚îÄ agreement.js          # Agreement template builder
‚îÇ       ‚îú‚îÄ‚îÄ delivery.js           # Delivery template builder  
‚îÇ       ‚îî‚îÄ‚îÄ final.js              # Final acknowledgment builder
‚îú‚îÄ‚îÄ contracts/
‚îÇ   ‚îî‚îÄ‚îÄ html/
‚îÇ       ‚îú‚îÄ‚îÄ agreement.js          # HTML with DocuSeal field tags
‚îÇ       ‚îú‚îÄ‚îÄ delivery.js           # Delivery agreement HTML
‚îÇ       ‚îú‚îÄ‚îÄ final.js              # Final acknowledgment HTML
‚îÇ       ‚îî‚îÄ‚îÄ field-converter.js    # üö® CRITICAL: Converts {{}} to HTML elements
backend/
‚îî‚îÄ‚îÄ dev-server.js                 # Dev server with template endpoints
```

## Success Criteria

### Template Creation Success
- ‚úÖ Template ID returned (e.g., 1710241, 1710288)
- ‚úÖ Template visible in DocuSeal dashboard
- ‚úÖ Template shows formatted document (not raw HTML)
- ‚úÖ Fields are properly mapped and interactive
- ‚úÖ **CRITICAL**: Template has `fields` array with parsed field elements
- ‚úÖ **CRITICAL**: Template has `submitters` array with correct roles

### Signing Experience Success  
- ‚úÖ "Open Full View" shows formatted PDF
- ‚úÖ "Start Signing" shows identical formatted document
- ‚úÖ All buyer/model/pricing data auto-populated
- ‚úÖ Signature and initial fields are interactive
- ‚úÖ Co-buyer fields work when present

## Emergency Troubleshooting

### Common Errors & Solutions
1. **"DOCUSEAL_API_KEY environment variable is required"**
   - Check .env file exists and has correct API key
   - Verify dev server loads .env from project root
   - Restart dev server after .env changes

2. **"DOCUSEAL_BASE is not defined"**
   - Check variable naming consistency in client.js
   - Use `BASE` internally, load from `DOCUSEAL_BASE_URL`

3. **"Failed to execute 'json' on 'Response'"**
   - API server not running or wrong port
   - Check Vite proxy configuration
   - Verify API endpoint exists in dev server

4. **Raw HTML shown in DocuSeal instead of formatted document**
   - Using wrong endpoint (/templates/docx instead of /templates/html)
   - Incorrect field tag syntax
   - Need to recreate template with HTML endpoint

5. **"422 Template does not contain fields" error**
   - **ROOT CAUSE**: Using curly brace syntax `{{field}}` with HTML API
   - **SOLUTION**: Use HTML element syntax `<text-field name="field">`
   - **FIX**: Implement `convertFieldTagsToHtmlElements()` function
   - **VERIFY**: Check template has populated `fields` array

6. **"500 Internal Server Error" during session creation**
   - Missing `roles` array in template creation
   - Missing `order` field in submitters array
   - Incorrect signing URL extraction logic
   - **FIX**: Add `roles: ['buyer', 'cobuyer', 'firefly_signer']` to template
   - **FIX**: Add `order: 0` for parallel, `order: 1` for sequential signing

## üö® FINAL WORKING SOLUTION SUMMARY

**The complete solution that resolves all DocuSeal integration issues:**

1. **Field Conversion**: Use `lib/contracts/html/field-converter.js` to convert `{{field}}` ‚Üí `<text-field>`
2. **HTML API**: Use `/templates/html` endpoint with HTML element syntax
3. **Template Roles**: Always include `roles: ['buyer', 'cobuyer', 'firefly_signer']`
4. **Submitter Order**: Use `order: 0` for parallel, `order: 1` for sequential signing
5. **Exact Field Names**: Match template field names exactly in session data
6. **Working Templates**: Use IDs `1710241` (agreement) and `1710288` (delivery)

This rule captures the complete DocuSeal integration process that took hours to debug and perfect. Follow these patterns exactly for consistent success.
 
 # #     C R I T I C A L   B R E A K T H R O U G H :   C o n t r a c t   S i g n i n g   F l o w   ( 2 0 2 5 - 0 9 - 0 9 ) 
 
 # # #   T h e   C o m p l e t e   W o r k i n g   F l o w 
 
 * * 1 .   T e m p l a t e   F i e l d   M a p p i n g   ( l i b / d o c u s e a l / f i e l d M a p s . j s ) * * 
 \ \ \ j a v a s c r i p t 
 / /     W O R K I N G :   E x a c t   f i e l d   n a m e s   f r o m   t e m p l a t e   i m a g e 
 e x p o r t   c o n s t   F I E L D _ M A P S   =   { 
     m a s t e r R e t a i l :   { 
         / /   B u y e r   I n f o r m a t i o n   ( 4   f i e l d s ) 
         b u y e r _ f u l l _ n a m e :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         b u y e r _ e m a i l :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         b u y e r _ a d d r e s s :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         b u y e r _ p h o n e :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         
         / /   U n i t   I n f o r m a t i o n   ( 4   f i e l d s ) 
         m o d e l _ b r a n d :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         m o d e l _ c o d e :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         m o d e l _ y e a r :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         d i m e n s i o n s :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         
         / /   P r i c i n g   I n f o r m a t i o n   ( 6   f i e l d s ) 
         p r i c e _ b a s e :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         p r i c e _ o p t i o n s :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         p r i c e _ f r e i g h t _ e s t :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         p r i c e _ s e t u p :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         p r i c e _ o t h e r :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         p r i c e _ t o t a l :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   t r u e   } , 
         
         / /   S i g n a t u r e   a n d   I n i t i a l s   ( 4   f i e l d s ) 
         b u y e r _ i n i t i a l s _ 1 :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   f a l s e   } , 
         b u y e r _ i n i t i a l s _ 2 :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   f a l s e   } , 
         b u y e r _ i n i t i a l s _ 3 :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   f a l s e   } , 
         b u y e r _ s i g n a t u r e :   {   r o l e :   ' b u y e r ' ,   r e a d o n l y :   f a l s e   } 
     } 
 } 
 \ \ \ 
 
 * * 2 .   F i e l d   F i l t e r i n g   ( a p i / i n d e x . j s ) * * 
 \ \ \ j a v a s c r i p t 
 / /     W O R K I N G :   F i l t e r   p r e f i l l   d a t a   t o   o n l y   v a l i d   t e m p l a t e   f i e l d s 
 c o n s t   t e m p l a t e F i e l d M a p   =   t e m p l a t e . f i e l d M a p   | |   { } 
 c o n s t   v a l i d F i e l d N a m e s   =   n e w   S e t ( O b j e c t . k e y s ( t e m p l a t e F i e l d M a p ) ) 
 
 c o n s t   f i l t e r e d P r e f i l l D a t a   =   { } 
 f o r   ( c o n s t   [ k e y ,   v a l u e ]   o f   O b j e c t . e n t r i e s ( p r e f i l l D a t a ) )   { 
     i f   ( v a l i d F i e l d N a m e s . h a s ( k e y ) )   { 
         f i l t e r e d P r e f i l l D a t a [ k e y ]   =   v a l u e 
     } 
 } 
 \ \ \ 
 
 * * 3 .   R e s p o n s e   F o r m a t   H a n d l i n g   ( l i b / d o c u s e a l . j s ) * * 
 \ \ \ j a v a s c r i p t 
 / /     W O R K I N G :   H a n d l e   D o c u S e a l ' s   a r r a y   r e s p o n s e   f o r m a t 
 c o n s t   j s o n   =   a w a i t   r e s . j s o n ( ) 
 
 l e t   s u b m i s s i o n I d ,   s i g n e r U r l 
 
 i f   ( A r r a y . i s A r r a y ( j s o n ) )   { 
     / /   R e s p o n s e   i s   a n   a r r a y   o f   s u b m i t t e r s 
     c o n s t   f i r s t S u b m i t t e r   =   j s o n [ 0 ] 
     s u b m i s s i o n I d   =   f i r s t S u b m i t t e r ? . s u b m i s s i o n _ i d   | |   f i r s t S u b m i t t e r ? . i d 
     s i g n e r U r l   =   f i r s t S u b m i t t e r ? . e m b e d _ s r c   | |   f i r s t S u b m i t t e r ? . u r l 
 }   e l s e   { 
     / /   R e s p o n s e   i s   a   s i n g l e   o b j e c t 
     s u b m i s s i o n I d   =   j s o n ? . i d   | |   j s o n ? . u u i d   | |   j s o n ? . s u b m i s s i o n ? . i d 
     s i g n e r U r l   =   j s o n ? . i n v i t e _ l i n k s ? . [ 0 ] ? . u r l   | |   j s o n ? . s u b m i t t e r s ? . [ 0 ] ? . u r l   | |   j s o n ? . e m b e d _ s r c 
 } 
 
 r e t u r n   {   s u b m i s s i o n I d ,   s i g n e r U r l ,   r a w :   j s o n   } 
 \ \ \ 
 
 # # #   T h e   C o m p l e t e   E r r o r   R e s o l u t i o n   P r o c e s s 
 
 * * P r o b l e m   1 :   \  
 t e m p l a t e I d  
 i s  
 n o t  
 d e f i n e d \ * * 
 -   * * R o o t   C a u s e * * :   V a r i a b l e   s c o p e   e r r o r   i n   f i e l d   v a l i d a t i o n   l o g i c 
 -   * * S o l u t i o n * * :   R e m o v e d   u n n e c e s s a r y   f i e l d   v a l i d a t i o n ,   s i m p l i f i e d   p r e f i l l   d a t a   f l o w 
 
 * * P r o b l e m   2 :   \ U n k n o w n  
 f i e l d :  
 o r d e r _ i d \ * * 
 -   * * R o o t   C a u s e * * :   S e n d i n g   6 9   f i e l d s   w h e n   t e m p l a t e   o n l y   h a s   1 8   v a l i d   f i e l d s 
 -   * * S o l u t i o n * * :   I m p l e m e n t e d   f i e l d   f i l t e r i n g   u s i n g   t e m p l a t e   f i e l d   r e g i s t r y 
 
 * * P r o b l e m   3 :   \ N o  
 s i g n i n g  
 U R L  
 f o u n d \ * * 
 -   * * R o o t   C a u s e * * :   D o c u S e a l   r e t u r n s   a r r a y   f o r m a t ,   b u t   c o d e   e x p e c t e d   o b j e c t   f o r m a t 
 -   * * S o l u t i o n * * :   U p d a t e d   r e s p o n s e   p a r s i n g   t o   h a n d l e   b o t h   a r r a y   a n d   o b j e c t   f o r m a t s 
 
 # # #   T e m p l a t e   F i e l d   V a l i d a t i o n   R e s u l t s 
 \ \ \ 
   W O R K I N G :   T e m p l a t e   h a s   1 8   f i e l d s   t o t a l 
 -   T e x t   F i e l d s   ( 1 4 ) :   b u y e r _ f u l l _ n a m e ,   b u y e r _ e m a i l ,   b u y e r _ a d d r e s s ,   b u y e r _ p h o n e ,   
     m o d e l _ b r a n d ,   m o d e l _ c o d e ,   m o d e l _ y e a r ,   d i m e n s i o n s ,   p r i c e _ b a s e ,   p r i c e _ o p t i o n s ,   
     p r i c e _ f r e i g h t _ e s t ,   p r i c e _ s e t u p ,   p r i c e _ o t h e r ,   p r i c e _ t o t a l 
 -   I n i t i a l s / S i g n a t u r e   F i e l d s   ( 4 ) :   b u y e r _ i n i t i a l s _ 1 ,   b u y e r _ i n i t i a l s _ 2 ,   
     b u y e r _ i n i t i a l s _ 3 ,   b u y e r _ s i g n a t u r e 
 
   F I L T E R E D   O U T :   5 1   i n v a l i d   f i e l d s   i n c l u d i n g   o r d e r _ i d ,   o r d e r _ d a t e ,   d e a l e r _ n a m e ,   e t c . 
 \ \ \ 
 
 # # #   D o c u S e a l   R e s p o n s e   F o r m a t 
 \ \ \ j a v a s c r i p t 
 / /     A C T U A L   W O R K I N G   R E S P O N S E   F O R M A T 
 [ 
     { 
         \ i d \ :   4 2 4 0 5 1 6 , 
         \ s u b m i s s i o n _ i d \ :   3 1 9 8 8 0 9 , 
         \ e m b e d _ s r c \ :   \ h t t p s : / / d o c u s e a l . c o m / s / 7 C s t 7 D H Z D f 3 X r m \ , 
         \ n a m e \ :   \ J o s h u a  
 P i s t o n e \ , 
         \ e m a i l \ :   \ j o s h @ r e d d y p r o s . c o m \ , 
         \ s t a t u s \ :   \ a w a i t i n g \ , 
         \ v a l u e s \ :   [ / *   p r e f i l l   d a t a   * / ] 
     } 
 ] 
 \ \ \ 
 
 # # #   F r o n t e n d   I n t e g r a t i o n 
 \ \ \ j a v a s c r i p t 
 / /     W O R K I N G :   F r o n t e n d   c o r r e c t l y   h a n d l e s   t h e   r e s p o n s e 
 c o n s t   s e s s i o n   =   a w a i t   r e s p o n s e . j s o n ( ) 
 c o n s t   s i g n i n g U r l   =   s e s s i o n . e m b e d U r l   | |   s e s s i o n . s i g n i n g U r l 
 c o n s t   n e w W i n d o w   =   w i n d o w . o p e n ( s i g n i n g U r l ,   ' _ b l a n k ' ,   ' w i d t h = 1 2 0 0 , h e i g h t = 8 0 0 ' ) 
 \ \ \ 
 
 # # #   E n v i r o n m e n t   V a r i a b l e   C o m p a t i b i l i t y 
 \ \ \ j a v a s c r i p t 
 / /     W O R K I N G :   S u p p o r t   b o t h   o l d   a n d   n e w   e n v i r o n m e n t   v a r i a b l e   n a m e s 
 e x p o r t   c o n s t   T E M P L A T E S   =   { 
     m a s t e r R e t a i l :   { 
         i d :   p a r s e I n t ( p r o c e s s . e n v . D O C U S E A L _ T E M P L A T E _ I D _ A G R E E M E N T   | |   
                                   p r o c e s s . e n v . D O C U S E A L _ P U R C H A S E _ T E M P L A T E _ I D   | |   ' 1 7 1 0 2 4 1 ' ) , 
         n a m e :   ' M a s t e r   R e t a i l   P u r c h a s e   A g r e e m e n t ' , 
         f i e l d M a p :   g e t F i e l d M a p ( ' m a s t e r R e t a i l ' ) 
     } 
 } 
 \ \ \ 
 
 # # #   S u c c e s s   M e t r i c s 
 -     * * T e m p l a t e   C r e a t i o n * * :   T e m p l a t e   I D   1 7 1 0 2 4 1   w o r k i n g 
 -     * * F i e l d   V a l i d a t i o n * * :   1 8 / 1 8   v a l i d   f i e l d s   m a p p e d   c o r r e c t l y 
 -     * * A P I   R e s p o n s e * * :   2 0 0   O K   w i t h   p r o p e r   s i g n i n g   U R L 
 -     * * F r o n t e n d   I n t e g r a t i o n * * :   D o c u m e n t   o p e n s   i n   n e w   t a b   s u c c e s s f u l l y 
 -     * * U s e r   E x p e r i e n c e * * :   C o m p l e t e   c o n t r a c t   s i g n i n g   f l o w   f u n c t i o n a l 
 
 T h i s   b r e a k t h r o u g h   s o l u t i o n   r e s o l v e s   a l l   D o c u S e a l   i n t e g r a t i o n   i s s u e s   a n d   p r o v i d e s   a   r o b u s t ,   m a i n t a i n a b l e   f o u n d a t i o n   f o r   f u t u r e   c o n t r a c t   t e m p l a t e s .  
 
 
 # #     C R I T I C A L   F I X :   P D F   P r e f i l l i n g   I s s u e   ( 2 0 2 5 - 0 9 - 0 9 ) 
 
 # # #   T h e   P r o b l e m 
 -   * * O n l i n e   V i e w * * :   S h o w s   p r e - f i l l e d   d a t a   i n   D o c u S e a l   i n t e r f a c e   
 -   * * D o w n l o a d e d   P D F * * :   S h o w s   e m p t y   f i e l d s   
 
 # # #   R o o t   C a u s e 
 U s i n g   \ s u b m i t t e r s [ ] . f i e l d s \   a r r a y   i n s t e a d   o f   \ s u b m i t t e r s [ ] . v a l u e s \   o b j e c t   f o r   t e m p l a t e - b a s e d   s u b m i s s i o n s . 
 
 # # #   T h e   S o l u t i o n 
 \ \ \ j a v a s c r i p t 
 / /     W R O N G :   U s i n g   f i e l d s   a r r a y   ( d o e s n ' t   w o r k   f o r   P D F   p r e f i l l i n g ) 
 c o n s t   s u b m i t t e r s W i t h F i e l d s   =   s u b m i t t e r s . m a p ( s u b m i t t e r   = >   ( { 
     . . . s u b m i t t e r , 
     f i e l d s :   f i e l d s     / /   T h i s   d o e s n ' t   p r e f i l l   t h e   P D F 
 } ) ) 
 
 / /     C O R R E C T :   U s i n g   v a l u e s   o b j e c t   ( p r o p e r l y   p r e f i l l s   P D F ) 
 c o n s t   s u b m i t t e r s W i t h V a l u e s   =   s u b m i t t e r s . m a p ( s u b m i t t e r   = >   ( { 
     . . . s u b m i t t e r , 
     v a l u e s :   p r e f i l l   | |   { }     / /   T h i s   e n s u r e s   d a t a   a p p e a r s   i n   d o w n l o a d e d   P D F 
 } ) ) 
 \ \ \ 
 
 # # #   U p d a t e d   c r e a t e S u b m i s s i o n   F u n c t i o n 
 \ \ \ j a v a s c r i p t 
 e x p o r t   a s y n c   f u n c t i o n   c r e a t e S u b m i s s i o n ( {   t e m p l a t e I d ,   p r e f i l l ,   s u b m i t t e r s ,   s e n d E m a i l   =   f a l s e ,   o r d e r   =   ' p r e s e r v e d ' ,   c o m p l e t e d R e d i r e c t U r l ,   c a n c e l R e d i r e c t U r l   } )   { 
     c o n s t   u r l   =   \ \ / s u b m i s s i o n s \ 
     
     / /   F o r   t e m p l a t e - b a s e d   s u b m i s s i o n s ,   u s e   ' v a l u e s '   f i e l d   t o   p r e f i l l   d a t a 
     / /   T h i s   e n s u r e s   t h e   d a t a   a p p e a r s   i n   t h e   d o w n l o a d e d   P D F 
     c o n s t   s u b m i t t e r s W i t h V a l u e s   =   ( s u b m i t t e r s   | |   [ ] ) . m a p ( s u b m i t t e r   = >   ( { 
         . . . s u b m i t t e r , 
         v a l u e s :   p r e f i l l   | |   { }     / /   U s e   ' v a l u e s '   f i e l d   f o r   t e m p l a t e   p r e f i l l i n g 
     } ) ) 
     
     c o n s t   b o d y   =   { 
         t e m p l a t e _ i d :   t e m p l a t e I d , 
         o r d e r , 
         s e n d _ e m a i l :   ! ! s e n d E m a i l , 
         c o m p l e t e d _ r e d i r e c t _ u r l :   c o m p l e t e d R e d i r e c t U r l , 
         c a n c e l _ r e d i r e c t _ u r l :   c a n c e l R e d i r e c t U r l , 
         s u b m i t t e r s :   s u b m i t t e r s W i t h V a l u e s , 
     } 
     
     / /   . . .   r e s t   o f   f u n c t i o n 
 } 
 \ \ \ 
 
 # # #   K e y   D i f f e r e n c e s 
 -   * * \  i e l d s \   a r r a y * * :   U s e d   f o r   o n e - o f f   s u b m i s s i o n s   w i t h   c u s t o m   f i e l d   d e f i n i t i o n s 
 -   * * \  a l u e s \   o b j e c t * * :   U s e d   f o r   t e m p l a t e - b a s e d   s u b m i s s i o n s   t o   p r e f i l l   e x i s t i n g   t e m p l a t e   f i e l d s 
 
 # # #   S u c c e s s   M e t r i c s   ( U p d a t e d ) 
 -     * * T e m p l a t e   C r e a t i o n * * :   T e m p l a t e   I D   1 7 1 0 2 4 1   w o r k i n g 
 -     * * F i e l d   V a l i d a t i o n * * :   1 8 / 1 8   v a l i d   f i e l d s   m a p p e d   c o r r e c t l y 
 -     * * A P I   R e s p o n s e * * :   2 0 0   O K   w i t h   p r o p e r   s i g n i n g   U R L 
 -     * * F r o n t e n d   I n t e g r a t i o n * * :   D o c u m e n t   o p e n s   i n   n e w   t a b   s u c c e s s f u l l y 
 -     * * U s e r   E x p e r i e n c e * * :   C o m p l e t e   c o n t r a c t   s i g n i n g   f l o w   f u n c t i o n a l 
 -     * * P D F   P r e f i l l i n g * * :   D o w n l o a d e d   P D F s   s h o w   p r e - f i l l e d   d a t a   c o r r e c t l y 
 
 T h i s   b r e a k t h r o u g h   s o l u t i o n   r e s o l v e s   a l l   D o c u S e a l   i n t e g r a t i o n   i s s u e s   a n d   p r o v i d e s   a   r o b u s t ,   m a i n t a i n a b l e   f o u n d a t i o n   f o r   f u t u r e   c o n t r a c t   t e m p l a t e s .  
 
 
 # #     C O R R E C T E D   F I X :   P D F   P r e f i l l i n g   I s s u e   ( 2 0 2 5 - 0 9 - 0 9 ) 
 
 # # #   T h e   P r o b l e m 
 -   * * O n l i n e   V i e w * * :   S h o w s   p r e - f i l l e d   d a t a   i n   D o c u S e a l   i n t e r f a c e   
 -   * * D o w n l o a d e d   P D F * * :   S h o w s   e m p t y   f i e l d s   
 
 # # #   R o o t   C a u s e   A n a l y s i s 
 T h e   i s s u e   w a s   u s i n g   t h e   w r o n g   a p p r o a c h   f o r   t e m p l a t e - b a s e d   s u b m i s s i o n s .   W e   t r i e d   b o t h : 
 1 .     * * s u b m i t t e r s [ ] . f i e l d s   a r r a y * *   ( f i r s t   a t t e m p t   -   d i d n ' t   w o r k ) 
 2 .     * * s u b m i t t e r s [ ] . v a l u e s   o b j e c t * *   ( s e c o n d   a t t e m p t   -   d i d n ' t   w o r k ) 
 3 .     * * s u b m i t t e r s [ ] . f i e l d s   a r r a y   w i t h   d e f a u l t _ v a l u e * *   ( c o r r e c t   a p p r o a c h ) 
 
 # # #   T h e   C o r r e c t   S o l u t i o n 
 F o r   t e m p l a t e - b a s e d   s u b m i s s i o n s ,   u s e   t h e    i e l d s   a r r a y   w i t h   d e f a u l t _ v a l u e   p r o p e r t i e s : 
 
 \ \ \ j a v a s c r i p t 
 / /     C O R R E C T :   U s e   f i e l d s   a r r a y   w i t h   d e f a u l t _ v a l u e   f o r   t e m p l a t e   p r e f i l l i n g 
 c o n s t   f i e l d s   =   p r e f i l l   ?   O b j e c t . e n t r i e s ( p r e f i l l ) . m a p ( ( [ n a m e ,   v a l u e ] )   = >   ( { 
     n a m e :   n a m e , 
     d e f a u l t _ v a l u e :   S t r i n g ( v a l u e   | |   ' ' ) , 
     r e a d o n l y :   t r u e 
 } ) )   :   [ ] 
 
 c o n s t   s u b m i t t e r s W i t h F i e l d s   =   s u b m i t t e r s . m a p ( s u b m i t t e r   = >   ( { 
     . . . s u b m i t t e r , 
     f i e l d s :   f i e l d s     / /   T h i s   e n s u r e s   d a t a   a p p e a r s   i n   b o t h   o n l i n e   v i e w   a n d   P D F 
 } ) ) 
 \ \ \ 
 
 # # #   U p d a t e d   c r e a t e S u b m i s s i o n   F u n c t i o n 
 \ \ \ j a v a s c r i p t 
 e x p o r t   a s y n c   f u n c t i o n   c r e a t e S u b m i s s i o n ( {   t e m p l a t e I d ,   p r e f i l l ,   s u b m i t t e r s ,   s e n d E m a i l   =   f a l s e ,   o r d e r   =   ' p r e s e r v e d ' ,   c o m p l e t e d R e d i r e c t U r l ,   c a n c e l R e d i r e c t U r l   } )   { 
     c o n s t   u r l   =   \ \ / s u b m i s s i o n s \ 
     
     / /   F o r   t e m p l a t e - b a s e d   s u b m i s s i o n s ,   u s e   ' f i e l d s '   a r r a y   w i t h   d e f a u l t _ v a l u e 
     / /   T h i s   e n s u r e s   t h e   d a t a   a p p e a r s   i n   b o t h   o n l i n e   v i e w   a n d   d o w n l o a d e d   P D F 
     c o n s t   f i e l d s   =   p r e f i l l   ?   O b j e c t . e n t r i e s ( p r e f i l l ) . m a p ( ( [ n a m e ,   v a l u e ] )   = >   ( { 
         n a m e :   n a m e , 
         d e f a u l t _ v a l u e :   S t r i n g ( v a l u e   | |   ' ' ) , 
         r e a d o n l y :   t r u e 
     } ) )   :   [ ] 
     
     / /   A d d   f i e l d s   t o   e a c h   s u b m i t t e r 
     c o n s t   s u b m i t t e r s W i t h F i e l d s   =   ( s u b m i t t e r s   | |   [ ] ) . m a p ( s u b m i t t e r   = >   ( { 
         . . . s u b m i t t e r , 
         f i e l d s :   f i e l d s 
     } ) ) 
     
     c o n s t   b o d y   =   { 
         t e m p l a t e _ i d :   t e m p l a t e I d , 
         o r d e r , 
         s e n d _ e m a i l :   ! ! s e n d E m a i l , 
         c o m p l e t e d _ r e d i r e c t _ u r l :   c o m p l e t e d R e d i r e c t U r l , 
         c a n c e l _ r e d i r e c t _ u r l :   c a n c e l R e d i r e c t U r l , 
         s u b m i t t e r s :   s u b m i t t e r s W i t h F i e l d s , 
     } 
     
     / /   . . .   r e s t   o f   f u n c t i o n 
 } 
 \ \ \ 
 
 # # #   K e y   D i f f e r e n c e s 
 -   * * T e m p l a t e - b a s e d   s u b m i s s i o n s * * :   U s e   s u b m i t t e r s [ ] . f i e l d s   a r r a y   w i t h   d e f a u l t _ v a l u e   p r o p e r t i e s 
 -   * * O n e - o f f   s u b m i s s i o n s * * :   U s e   s u b m i t t e r s [ ] . v a l u e s   o b j e c t   f o r   s i m p l e   k e y - v a l u e   p r e f i l l i n g 
 -   * * F i e l d   s t r u c t u r e * * :   E a c h   f i e l d   n e e d s   
 a m e ,   d e f a u l t _ v a l u e ,   a n d    e a d o n l y   p r o p e r t i e s 
 
 # # #   S u c c e s s   M e t r i c s   ( F i n a l ) 
 -     * * T e m p l a t e   C r e a t i o n * * :   T e m p l a t e   I D   1 7 1 0 2 4 1   w o r k i n g 
 -     * * F i e l d   V a l i d a t i o n * * :   1 8 / 1 8   v a l i d   f i e l d s   m a p p e d   c o r r e c t l y 
 -     * * A P I   R e s p o n s e * * :   2 0 0   O K   w i t h   p r o p e r   s i g n i n g   U R L 
 -     * * F r o n t e n d   I n t e g r a t i o n * * :   D o c u m e n t   o p e n s   i n   n e w   t a b   s u c c e s s f u l l y 
 -     * * U s e r   E x p e r i e n c e * * :   C o m p l e t e   c o n t r a c t   s i g n i n g   f l o w   f u n c t i o n a l 
 -     * * P D F   P r e f i l l i n g * * :   D o w n l o a d e d   P D F s   s h o w   p r e - f i l l e d   d a t a   c o r r e c t l y 
 -     * * O n l i n e   V i e w * * :   D o c u S e a l   i n t e r f a c e   s h o w s   p r e - f i l l e d   d a t a   c o r r e c t l y 
 
 T h i s   f i n a l   s o l u t i o n   r e s o l v e s   a l l   D o c u S e a l   i n t e g r a t i o n   i s s u e s   a n d   p r o v i d e s   a   r o b u s t ,   m a i n t a i n a b l e   f o u n d a t i o n   f o r   f u t u r e   c o n t r a c t   t e m p l a t e s .  
 